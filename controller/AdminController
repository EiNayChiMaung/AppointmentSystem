package com.cityStar.controller;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.cityStar.model.Admin;
import com.cityStar.model.Appointment;
import com.cityStar.model.AppointmentStatus;
import com.cityStar.model.Doctor;
import com.cityStar.model.Patient;
import com.cityStar.service.AdminService;
import com.cityStar.service.AppointmentService;
import com.cityStar.service.DoctorService;
import com.cityStar.service.PatientService;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/admin")
public class AdminController {
	
	@Autowired
	private AdminService adminSer;
	@Autowired
	private DoctorService doctorSer;
	@Autowired
	private PatientService patientSer;
	@Autowired
	private AppointmentService appointmentSer;
	
	@GetMapping("/signup")
    public String showSignUpForm(Model model) {
        model.addAttribute("admin", new Admin());
        return "adminSignUp";
    }

	@PostMapping("/signup")
    public String signupAdmin(@RequestParam("name") String name,
                              @RequestParam("email") String email,
                              @RequestParam("password") String password,
    						  @RequestParam("phoneNumber") String phoneNumber) {
        adminSer.signupAdmin(name, email, password, phoneNumber);
        return "redirect:/admin/login"; 
    }
	
	@GetMapping("/login")
    public String showAdminLoginPage() {
        return "adminLogin";
    }
	
	@GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/admin/login";
    }
	 
	@PostMapping("/login")
    public String loginAdmin(@ModelAttribute("admin") Admin admin, Model model, HttpSession session) {
        Admin loggedInAdmin = adminSer.authenticateAdmin(admin.getEmail(), admin.getPassword());       
        if (loggedInAdmin != null) {
            session.setAttribute("loggedInAdmin", loggedInAdmin);
            return "redirect:/admin/home";
        }        
        model.addAttribute("error", "Invalid email or password. Try again.");
        return "adminLogin";
    }
	
	@GetMapping("/home")
	public String showAdminHomePage(HttpSession session, Model model) {
	    Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";  
	    }
	    long totalDoctors = doctorSer.countApprovedDoctors();
	    long totalPatients = patientSer.countAllPatients();
	    long totalAppointments=appointmentSer.countAllAppointments();
	    
	    model.addAttribute("totalDoctors", totalDoctors);
	    model.addAttribute("totalPatients", totalPatients);
	    model.addAttribute("totalAppointments",totalAppointments);
	    model.addAttribute("loggedInAdmin", loggedInAdmin);
	    return "adminHome"; 
	}
	
	@GetMapping("/viewDoctorRequests")
	public String viewDoctorRequests(Model model, HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    List<Doctor> unapprovedDoctors = doctorSer.getDoctorsByConfirmStatus(false);
	    if (unapprovedDoctors.isEmpty()) {
	        model.addAttribute("message", "No doctor requests pending approval.");
	    }
	    model.addAttribute("unapprovedDoctors", unapprovedDoctors);
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewDoctorRequests";
	}
	
	@PostMapping("/approveDoctor")
	public String approveDoctor(@RequestParam("doctorId") Long doctorId) {
		doctorSer.approveDoctor(doctorId);
		return "redirect:/admin/viewDoctors";
	}
	
	@GetMapping("/viewDoctors")
	public String viewDoctors(Model model, HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    model.addAttribute("approvedDoctors", doctorSer.getDoctorsByConfirmStatus(true));
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewDoctors";
	}	
	
	@GetMapping("/searchDoctors")
	public String searchDoctors(@RequestParam("searchTerm") String searchTerm, Model model,HttpSession session) {
    	Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    if (searchTerm == null || searchTerm.trim().isEmpty()) {
	        model.addAttribute("approvedDoctors", doctorSer.getDoctorsByConfirmStatus(true));
	    } else {
	        List<Doctor> searchResults = doctorSer.searchDoctorsByNameOrEmail(searchTerm);
	        model.addAttribute("approvedDoctors", searchResults);	   	        	   
	    }
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewDoctors";
	}
	
	@PostMapping("/updateDoctor")
	public String updateDoctor(@ModelAttribute Doctor doctor) {
	    doctorSer.updateDoctor(doctor); 
	    return "redirect:/admin/viewDoctors";
	}
	
	@PostMapping("/deleteDoctor/{id}")
    public String deleteDoctor(@PathVariable("id") Long id) {
        doctorSer.deleteDoctorById(id);
        return "redirect:/admin/viewDoctors";
    }
	
	@GetMapping("/viewPatients")
	public String viewPatients(Model model, HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    model.addAttribute("patients", patientSer.getAllPatients());
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewPatients";
	}
	
	@GetMapping("/searchPatients")
	public String searchPatients(@RequestParam("searchTerm") String searchTerm, Model model,HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    if (searchTerm == null || searchTerm.trim().isEmpty()) {
	        model.addAttribute("patients", patientSer.getAllPatients());
	    } else {
	        List<Patient> searchResults = patientSer.searchPatientsByNameOrEmail(searchTerm);
	        model.addAttribute("patients", searchResults);	        
	    }
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewPatients"; 
	}
	
	@PostMapping("/updateProfile")
	public String updateProfile(@ModelAttribute("admin") Admin admin, HttpSession session) {
	    Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/adminlogin";
	    }
	    Admin updatedAdmin = adminSer.updateProfile(admin);
	    session.setAttribute("loggedInAdmin", updatedAdmin); 
	    return "redirect:/admin/home";
	}
	
	@PostMapping("/deletePatient/{id}")
    public String deletePatient(@PathVariable("id") Long id) {
		patientSer.deletePatientById(id);
        return "redirect:/admin/viewPatients";
    }

	@GetMapping("/viewAppointments")
    public String viewAppointments(Model model,HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
        List<Appointment> appointments = appointmentSer.getAllAppointments();
        model.addAttribute("appointments", appointments);
        model.addAttribute("loggedInAdmin",loggedInAdmin);
        return "viewAppointmentsByAdmin"; 
    }
	
	@PostMapping("/verifyAppointment")
	public String verifyAppointment(@RequestParam("appointmentId") Long appointmentId) {
	    appointmentSer.updateAppointmentStatus(appointmentId, AppointmentStatus.VERIFIED);
	    return "redirect:/admin/viewAppointments";
	}

	@PostMapping("/rejectAppointment")
	public String rejectAppointment(@RequestParam("appointmentId") Long appointmentId) {
	    appointmentSer.updateAppointmentStatus(appointmentId, AppointmentStatus.REJECTED);
	    return "redirect:/admin/viewAppointments";
	}
	
	@GetMapping("/searchAppointments")
	public String searchAppointments(@RequestParam("searchTerm") String searchTerm, Model model,HttpSession session) {
		Admin loggedInAdmin = (Admin) session.getAttribute("loggedInAdmin");
	    if (loggedInAdmin == null) {
	        return "redirect:/admin/login";
	    }
	    List<Appointment> searchResults = appointmentSer.searchAppointmentsByPatientOrDoctor(searchTerm);
	    model.addAttribute("appointments", searchResults);
	    model.addAttribute("loggedInAdmin",loggedInAdmin);
	    return "viewAppointmentsByAdmin";
	}
	
}

