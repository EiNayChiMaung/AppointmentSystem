package com.cityStar.repository;
import java.time.LocalDate;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.cityStar.model.Appointment;
import com.cityStar.model.AppointmentStatus;

public interface AppointmentRepository extends JpaRepository<Appointment, Long>{

	@Query("SELECT a FROM Appointment a WHERE LOWER(a.patient.name) LIKE LOWER(CONCAT('%', :searchTerm, '%')) " +
		       "OR LOWER(a.doctor.name) LIKE LOWER(CONCAT('%', :searchTerm, '%'))")
	List<Appointment> findByPatientNameContainingIgnoreCaseOrDoctorNameContainingIgnoreCase(@Param("searchTerm") String searchTerm);

	List<Appointment> findByDoctor_doctorIdAndStatus(Long doctorId, AppointmentStatus status);

	List<Appointment> findByPatient_patientId(Long patientId);

	long countByDoctorDoctorIdAndStatus(Long doctorId, AppointmentStatus status);
    
    @Query("SELECT COUNT(DISTINCT a.patient) FROM Appointment a " +
           "WHERE a.doctor.doctorId = :doctorId " +
           "AND a.doctorSchedule.date BETWEEN :start AND :end")
    long countDistinctPatientsByDoctorAndDateRange(
        @Param("doctorId") Long doctorId, 
        @Param("start") LocalDate start, 
        @Param("end") LocalDate end);
    
    long countByDoctorDoctorIdAndPatientAgeBetween(Long doctorId, int ageStart, int ageEnd);
    
    long countByDoctorDoctorIdAndPatientAgeGreaterThanEqual(Long doctorId, int age);
    
    @Query("SELECT COUNT(a) FROM Appointment a " +"WHERE a.doctor.doctorId = :doctorId " +"AND a.doctorSchedule.date = :date")
    long countByDoctorDoctorIdAndDoctorScheduleDate(
        @Param("doctorId") Long doctorId, 
        @Param("date") LocalDate date);
}
